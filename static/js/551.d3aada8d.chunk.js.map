{"version":3,"file":"static/js/551.d3aada8d.chunk.js","mappings":"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","sources":["components/configurebot/ChestArea.jsx","components/configurebot/SorterJob.jsx"],"sourcesContent":["import { Col, Row } from 'react-bootstrap'\nimport { connect } from 'react-redux'\n\nconst chestArea = (props) => {\n  const handleChange = (type, event) => {\n    const copyChest = { ...props.chestArea }\n    copyChest[type] = event.target.value\n\n    props.socket.emit('sendAction', {\n      action: 'changeConfig',\n      socketId: props.selectedSocketId,\n      value: {\n        configToChange: 'changeChestArea',\n        value: {\n          id: props.id,\n          chestArea: copyChest\n        }\n      }\n    })\n  }\n\n  const handleDeleteChestArea = (event) => {\n    props.socket.emit('sendAction', {\n      action: 'changeConfig',\n      socketId: props.selectedSocketId,\n      value: {\n        configToChange: 'deleteChestArea',\n        value: props.id\n      }\n    })\n  }\n\n  return (\n    <div className='p-3 mb-3 border rounded'>\n      <Row>\n\n        <Col xs={2}>\n          <div className='form-group'>\n            <label htmlFor='inputItem'><span className='badge bg-primary text-white'>X Start</span></label>\n            <input className='form-control' type='text' value={props.chestArea.xStart} onChange={handleChange.bind(props, 'xStart')} />\n          </div>\n        </Col>\n\n        <Col xs={2}>\n          <div className='form-group'>\n            <label htmlFor='inputItem'><span className='badge bg-warning text-dark'>Y Layer</span></label>\n            <input className='form-control' type='text' value={props.chestArea.yLayer} onChange={handleChange.bind(props, 'yLayer')} />\n          </div>\n        </Col>\n\n        <Col xs={2}>\n          <div className='form-group'>\n            <label htmlFor='inputItem'><span className='badge bg-secondary text-white'>Z Start</span></label>\n            <input className='form-control' type='text' value={props.chestArea.zStart} onChange={handleChange.bind(props, 'zStart')} />\n          </div>\n        </Col>\n\n        <Col xs={2}>\n          <div className='form-group'>\n            <label htmlFor='inputItem'><span className='badge bg-primary text-white'>X End</span></label>\n            <input className='form-control' type='text' value={props.chestArea.xEnd} onChange={handleChange.bind(props, 'xEnd')} />\n          </div>\n        </Col>\n\n        <Col xs={2}>\n          <div className='form-group'>\n            <label htmlFor='inputItem'><span className='badge bg-secondary text-white'>Z End</span></label>\n            <input className='form-control' type='text' value={props.chestArea.zEnd} onChange={handleChange.bind(props, 'zEnd')} />\n          </div>\n        </Col>\n\n      </Row>\n      \n      <Row className='mt-2'>\n        <Col xs={3}>\n          <button className='btn btn-danger form-control' onClick={handleDeleteChestArea}>Delete Area</button>\n        </Col>\n      </Row>\n    </div >\n\n  )\n}\n\nconst mapStateToProps = (reducers) => {\n  const { configurationReducer } = reducers\n  const { socket, selectedSocketId } = configurationReducer\n  return { socket, selectedSocketId }\n}\n\nexport default connect(mapStateToProps, null)(chestArea)\n","import { connect } from 'react-redux'\nimport { getBotBySocketId } from '../../actions/botsAction'\nimport ChestArea from './ChestArea'\n\nconst SorterJob = (props) => {\n  const botConfig = props.getBotBySocketId(props.selectedSocketId)\n  if (botConfig === undefined) { return null }\n\n  const handleInsertNewChestArea = (event) => {\n    props.socket.emit('sendAction', {\n      action: 'changeConfig',\n      socketId: botConfig.socketId,\n      value: {\n        configToChange: 'insertNewChestArea'\n      }\n    })\n  }\n\n\n  const renderChestArea = () => {\n    return botConfig.config.chestAreas.map((chestArea, index) => {\n      return (\n        <ChestArea key={index} id={index} chestArea={chestArea} />\n      )\n    })\n  }\n\n  return (\n    <>\n      <div className='row'>\n        <div className='col-12'>\n          <h4>Insert chest area</h4>\n          {renderChestArea()}\n        </div>\n      </div>\n\n      <div className='row mb-5'>\n        <div className='col-12'>\n          <button type='button' className='btn btn-success' onClick={handleInsertNewChestArea}>Insert New Chest Area</button>\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst mapStateToProps = (reducers) => {\n  const { configurationReducer } = reducers\n  const { socket, selectedSocketId } = configurationReducer\n\n  return { socket, selectedSocketId }\n}\n\nconst mapDispatchToProps = {\n  getBotBySocketId\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SorterJob)\n"],"names":["connect","reducers","configurationReducer","socket","selectedSocketId","props","handleChange","type","event","copyChest","chestArea","target","value","emit","action","socketId","configToChange","id","className","Row","Col","xs","htmlFor","xStart","onChange","bind","yLayer","zStart","xEnd","zEnd","onClick","mapDispatchToProps","getBotBySocketId","botConfig","undefined","config","chestAreas","map","index","ChestArea"],"sourceRoot":""}