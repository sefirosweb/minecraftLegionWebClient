{"version":3,"file":"static/js/454.5a9bf30b.chunk.js","mappings":"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","sources":["components/configurebot/GuardJob.jsx","components/configurebot/Icons/ArrowDown.jsx","components/configurebot/Icons/ArrowUp.jsx","components/configurebot/Icons/Trash.jsx","components/forms/FormCheck.jsx"],"sourcesContent":["import { Fragment, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getBotBySocketId } from \"../../actions/botsAction\";\nimport ArrowUp from \"./Icons/ArrowUp\";\nimport ArrowDown from \"./Icons/ArrowDown\";\nimport TrashIcon from \"./Icons/Trash\";\nimport FormCheck from \"../forms/FormCheck\";\n\nconst GuardJob = (props) => {\n  const [x, setX] = useState(\"\");\n  const [y, setY] = useState(\"\");\n  const [z, setZ] = useState(\"\");\n\n  const botConfig = props.getBotBySocketId(props.selectedSocketId);\n  if (botConfig === undefined) {\n    return null;\n  }\n\n  const changeConfig = (configToChange, value) => {\n    props.socket.emit(\"sendAction\", {\n      action: \"changeConfig\",\n      socketId: botConfig.socketId,\n      value: {\n        configToChange,\n        value,\n      },\n    });\n  };\n\n  const changePos = (event) => {\n    const value = Number(event.target.value);\n    if (!Number.isInteger(value) && event.target.value !== \"-\") {\n      return null;\n    }\n\n    switch (event.target.id) {\n      case \"xPos\":\n        setX(event.target.value);\n        break;\n      case \"yPos\":\n        setY(event.target.value);\n        break;\n      case \"zPos\":\n        setZ(event.target.value);\n        break;\n      default:\n        return null;\n    }\n  };\n  const insertPost = (event) => {\n    if (\n      !Number.isInteger(Number(x)) ||\n      !Number.isInteger(Number(y)) ||\n      !Number.isInteger(Number(z))\n    ) {\n      return null;\n    }\n\n    changeConfig(\"addPatrol\", {\n      x: Number(x),\n      y: Number(y),\n      z: Number(z),\n    });\n  };\n\n  const handleRemovePos = (index, event) => {\n    changeConfig(\"removePatrol\", index);\n  };\n\n  const handleMovePosNext = (index, event) => {\n    changeConfig(\"movePatrolNext\", index);\n  };\n\n  const handleMovePosPrev = (index, event) => {\n    changeConfig(\"movePatrolPrev\", index);\n  };\n\n  const handleButtonSavePositionHasMaster = (event) => {\n    changeConfig(\"savePositionHasMaster\", props.master);\n  };\n\n  const renderPatrolTable = () => {\n    return botConfig.config.patrol.map((pos, index) => {\n      return (\n        <tr key={index}>\n          <th scope=\"row\">{index}</th>\n          <td>\n            X:{pos.x}\n            <br />\n            Y:{pos.y}\n            <br />\n            Z:{pos.z}\n          </td>\n          <td>\n            <ArrowUp onClick={handleMovePosPrev.bind(this, index)} />{\" \"}\n            <ArrowDown onClick={handleMovePosNext.bind(this, index)} />\n          </td>\n          <td>\n            <TrashIcon onClick={handleRemovePos.bind(this, index)} />\n          </td>\n        </tr>\n      );\n    });\n  };\n\n\n  const handleButtonClearPositions = (event) => {\n    changeConfig(\"clearAllPositions\");\n  };\n\n  const copyPatrol = (event) => {\n    changeConfig(\"copyPatrol\", props.master);\n  };\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <FormCheck\n            id={\"helpFriends\"}\n            onChange={() =>\n              changeConfig(\"helpFriends\", !botConfig.config.helpFriends)\n            }\n            label={`Help Friend?`}\n            checked={botConfig.config.helpFriends}\n          />\n        </div>\n        <div className=\"col-3\">\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            onClick={handleButtonSavePositionHasMaster}\n          >\n            Copy the same position as the master\n          </button>\n        </div>\n        <div className=\"col-3\">\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            onClick={handleButtonClearPositions}\n          >\n            Clear all positions\n          </button>\n        </div>\n      </div>\n\n      <div className=\"row mb-2\">\n        <div className=\"col-2\">\n          <label>Position XYZ:</label>\n        </div>\n        <div className=\"col-2\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"X\"\n            id=\"xPos\"\n            value={x}\n            onChange={changePos}\n          />\n        </div>\n        <div className=\"col-2\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Y\"\n            id=\"yPos\"\n            value={y}\n            onChange={changePos}\n          />\n        </div>\n        <div className=\"col-2\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Z\"\n            id=\"zPos\"\n            value={z}\n            onChange={changePos}\n          />\n        </div>\n        <div className=\"col-2\">\n          <button\n            type=\"button\"\n            className=\"btn btn-primary form-control\"\n            onClick={insertPost}\n          >\n            Insert\n          </button>\n        </div>\n        <div className=\"col-2\">\n          {botConfig.config.isCopingPatrol ? (\n            <button\n              type=\"button\"\n              className=\"btn btn-warning form-control\"\n              onClick={copyPatrol}\n            >\n              Stop Copy\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"btn btn-success form-control\"\n              onClick={copyPatrol}\n            >\n              Start Copy\n            </button>\n          )}\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <table className=\"table\">\n            <thead className=\"thead-dark\">\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">POS</th>\n                <th scope=\"col\">Move</th>\n                <th scope=\"col\" />\n              </tr>\n            </thead>\n            <tbody>{renderPatrolTable()}</tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (reducers) => {\n  const { botsReducer, configurationReducer } = reducers;\n  const { botsOnline } = botsReducer;\n  const { socket, selectedSocketId, master } = configurationReducer;\n\n  return { botsOnline, socket, selectedSocketId, master };\n};\n\nconst mapDispatchToProps = {\n  getBotBySocketId,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GuardJob);\n","const ArrowDown = (props) => {\n  return (\n    <button type='button' className='btn btn-secondary' onClick={props.onClick}>\n      <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' className='bi bi-arrow-down-short' viewBox='0 0 16 16'>\n        <path fillRule='evenodd' d='M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4z' />\n      </svg>\n    </button>\n  )\n}\n\nexport default ArrowDown\n","const ArrowUp = (props) => {\n  return (\n    <button type='button' className='btn btn-secondary' onClick={props.onClick}>\n      <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' className='bi bi-arrow-up-short' viewBox='0 0 16 16'>\n        <path fillRule='evenodd' d='M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5z' />\n      </svg>\n    </button>\n  )\n}\n\nexport default ArrowUp\n","const Trash = (props) => {\n  return (\n    <button type='button' className='btn btn-secondary' onClick={props.onClick}>\n      <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' className='bi bi-trash' viewBox='0 0 16 16'>\n        <path d='M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z' />\n        <path fillRule='evenodd' d='M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z' />\n      </svg>\n      <span className='visually-hidden' />\n    </button>\n  )\n}\n\nexport default Trash\n","import React from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\n\n\n\nconst FormCheck = ({ id, checked, label, onChange }) => {\n    return (\n        <Form>\n            <Form.Group\n                as={Row}\n                className=\"mb-3\"\n                controlId=\"formPlaintextEmail\"\n            >\n                <Form.Label column sm=\"4\">\n                    {label}\n                </Form.Label>\n\n                <Col sm=\"8\">\n                    <Form.Check\n                        type=\"switch\"\n                        id={id}\n                        checked={checked}\n                        label={checked === true ? \"Yes\" : \"No\"}\n                        onChange={onChange}\n                    />\n                </Col>\n            </Form.Group>\n        </Form>\n    )\n}\n\nexport default FormCheck;\n"],"names":["mapDispatchToProps","getBotBySocketId","connect","reducers","botsReducer","configurationReducer","botsOnline","socket","selectedSocketId","master","props","useState","x","setX","y","setY","z","setZ","botConfig","undefined","changeConfig","configToChange","value","emit","action","socketId","changePos","event","Number","target","isInteger","id","handleRemovePos","index","handleMovePosNext","handleMovePosPrev","copyPatrol","className","onChange","config","helpFriends","label","checked","type","onClick","placeholder","isCopingPatrol","scope","patrol","map","pos","bind","xmlns","width","height","fill","viewBox","fillRule","d","as","Row","controlId","column","sm"],"sourceRoot":""}