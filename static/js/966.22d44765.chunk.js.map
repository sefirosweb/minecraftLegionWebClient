{"version":3,"file":"static/js/966.22d44765.chunk.js","mappings":"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","sources":["components/configurebot/Icons/Trash.jsx","utils/mc.js","components/configurebot/ItemsAviable.jsx","components/configurebot/ItemsToBeReady.jsx"],"sourcesContent":["const Trash = (props) => {\n  return (\n    <button type='button' className='btn btn-secondary' onClick={props.onClick}>\n      <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' className='bi bi-trash' viewBox='0 0 16 16'>\n        <path d='M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z' />\n        <path fillRule='evenodd' d='M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z' />\n      </svg>\n      <span className='visually-hidden' />\n    </button>\n  )\n}\n\nexport default Trash\n","const MC_VERSION = \"1.8.1\";\n// export const mcAssets = require(\"minecraft-assets\")(MC_VERSION);\nexport const mcData = require('minecraft-data')(MC_VERSION)","import { Fragment } from 'react'\n\nimport { mcData } from \"../../utils/mc\";\n\nconst plants = [\n  { displayName: 'Carrot', name: 'carrot' },\n  { displayName: 'Potato', name: 'potato' },\n  { displayName: 'Beetroot', name: 'beetroot' },\n  { displayName: 'Wheat', name: 'wheat' },\n  { displayName: 'Melon', name: 'melon' },\n  { displayName: 'Sweet Berries', name: 'sweet_berries' },\n  { displayName: 'Pumpkin', name: 'pumpkin' },\n  { displayName: 'Oak Sapling', name: 'oak_sapling' },\n  { displayName: 'Cabirch Saplingrrot', name: 'cabirch_saplingrrot' },\n  { displayName: 'Jungle Sapling', name: 'jungle_sapling' },\n  { displayName: 'Acacia Sapling', name: 'acacia_sapling' },\n  { displayName: 'Dark Oak Sapling', name: 'dark_oak_sapling' },\n  { displayName: 'Spruce Sapling', name: 'spruce_sapling' },\n  { displayName: 'Cactus', name: 'cactus' },\n  { displayName: 'Bamboo', name: 'bamboo' },\n  { displayName: 'Sugar Cane', name: 'sugar_cane' },\n]\n\nconst ItemsAviable = (props) => {\n  const renderBlocks = () => {\n    let type\n    switch (props.type) {\n      case 'all':\n        type = 'itemsArray'\n        type = mcData.itemsArray\n        break\n      case 'foods':\n        type = 'foodsArray'\n        type = mcData.foodsArray\n        break\n      case 'plants':\n        type = 'foodsArray'\n        type = plants\n        break\n      default:\n        type = 'itemsArray'\n        type = mcData.itemsArray\n        break\n    }\n\n    const matchRegularExpression = new RegExp(props.item, 'gi')\n    const items = type.filter(itemIndex => {\n      return itemIndex.displayName.match(matchRegularExpression)\n    })\n\n    if (items.length > 10) {\n      items.splice(0, items.length - 10)\n    }\n\n    return items.map((item, index) => {\n      return <option key={index} value={item.name}>{item.displayName}</option>\n    })\n  }\n\n  return (\n    <>\n      {renderBlocks()}\n    </>\n  )\n}\n\nexport default ItemsAviable\n","import { Fragment, useState } from 'react'\nimport ItemsAviable from './ItemsAviable'\nimport { connect } from 'react-redux'\nimport { getBotBySocketId } from '../../actions/botsAction'\nimport TrashIcon from './Icons/Trash'\n\nconst ItemsToBeReady = (props) => {\n  const [item, setItem] = useState('')\n  const [quantity, setQuantity] = useState(1)\n\n  const botConfig = props.getBotBySocketId(props.selectedSocketId)\n  if (botConfig === undefined) { return null }\n\n  const handleQuantityChange = (event) => {\n    const value = Number(event.target.value)\n    if (Number.isInteger(value)) {\n      setQuantity(value)\n    }\n  }\n\n  const handleItemChange = (event) => {\n    setItem(event.target.value)\n  }\n\n  const handleInsertItem = (event) => {\n    if (item === '' || quantity === 0) {\n      return null\n    }\n\n    props.socket.emit('sendAction', {\n      action: 'changeConfig',\n      socketId: botConfig.socketId,\n      value: {\n        configToChange: 'InsertItemToBeReady',\n        value: {\n          item, quantity\n        }\n      }\n    })\n  }\n\n  const handleRemoveItem = (index, event) => {\n    props.socket.emit('sendAction', {\n      action: 'changeConfig',\n      socketId: botConfig.socketId,\n      value: {\n        configToChange: 'DeleteItemToBeReady',\n        value: index\n      }\n    })\n  }\n\n  const renderItemsTable = () => {\n    return botConfig.config.itemsToBeReady.map((item, index) => {\n      return (\n        <tr key={index}>\n          <th scope='row'>{index}</th>\n          <td>{item.item}</td>\n          <td>{item.quantity}</td>\n          <td><TrashIcon onClick={handleRemoveItem.bind(this, index)} /></td>\n        </tr>\n      )\n    })\n  }\n\n  return (\n    <>\n      <div className='row'>\n        <div className='col-12'>\n          <label>\n            This is a minimun requeried for start bot to work,<br />\n            Example, Guard need a sword and shield, Miner need a 1 pickaxe\n          </label>\n        </div>\n      </div>\n\n      <div className='row'>\n        <div className='col-6'>\n          <div className='form-group'>\n            <label htmlFor='inputItem'>Select Item</label>\n            <input className='form-control' type='text' list='itemsList' value={item} onChange={handleItemChange} />\n            <datalist id='itemsList'>\n              <ItemsAviable item={item} />\n            </datalist>\n          </div>\n        </div>\n\n        <div className='col-2'>\n          <div className='form-group'>\n            <label>Quantity</label>\n            <input type='text' className='form-control' value={quantity} onChange={handleQuantityChange} />\n          </div>\n        </div>\n\n        <div className='col-2'>\n          <div className='form-group'>\n            <label>.</label>\n            <button className='form-control btn btn-primary' onClick={handleInsertItem}>Insert</button>\n          </div>\n        </div>\n      </div>\n\n      <div className='row'>\n        <div className='col-12'>\n\n          <table className='table'>\n            <thead className='thead-dark'>\n              <tr>\n                <th scope='col'>#</th>\n                <th scope='col'>Item</th>\n                <th scope='col'>Quantity</th>\n                <th scope='col' />\n              </tr>\n            </thead>\n            <tbody>\n              {renderItemsTable()}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n    </>\n  )\n}\n\nconst mapStateToProps = (reducers) => {\n  const { botsReducer, configurationReducer } = reducers\n  const { botsOnline } = botsReducer\n  const { socket, selectedSocketId } = configurationReducer\n\n  return { botsOnline, socket, selectedSocketId }\n}\n\nconst mapDispatchToProps = {\n  getBotBySocketId\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ItemsToBeReady)\n"],"names":["props","type","className","onClick","xmlns","width","height","fill","viewBox","d","fillRule","mcData","require","plants","displayName","name","itemsArray","foodsArray","matchRegularExpression","RegExp","item","items","filter","itemIndex","match","length","splice","map","index","value","renderBlocks","mapDispatchToProps","getBotBySocketId","connect","reducers","botsReducer","configurationReducer","botsOnline","socket","selectedSocketId","useState","setItem","quantity","setQuantity","botConfig","undefined","handleRemoveItem","event","emit","action","socketId","configToChange","htmlFor","list","onChange","target","id","Number","isInteger","scope","config","itemsToBeReady","bind"],"sourceRoot":""}