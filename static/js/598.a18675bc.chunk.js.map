{"version":3,"file":"static/js/598.a18675bc.chunk.js","mappings":"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","sources":["components/configurebot/HarvestArea.jsx","components/configurebot/FarmerJob.jsx","utils/mc.js","components/configurebot/ItemsAviable.jsx","components/forms/LayerCoords.jsx"],"sourcesContent":["import { Col, Row } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport ItemsAviable from './ItemsAviable'\nimport LayerCoords from '../forms/LayerCoords'\n\nconst HarvestArea = (props) => {\n  const {\n    id,\n    plantArea,\n    socket,\n    selectedSocketId\n  } = props\n\n  const handleChange = (event, type) => {\n    const copyPlant = { ...plantArea }\n    copyPlant[type] = event.target.value\n\n    socket.emit('sendAction', {\n      action: 'changeConfig',\n      socketId: selectedSocketId,\n      value: {\n        configToChange: 'changePlantArea',\n        value: {\n          id: id,\n          plantArea: copyPlant\n        }\n      }\n    })\n  }\n\n  const handleDeletePlantArea = (event) => {\n    socket.emit('sendAction', {\n      action: 'changeConfig',\n      socketId: selectedSocketId,\n      value: {\n        configToChange: 'deletePlantArea',\n        value: id\n      }\n    })\n  }\n\n  return (\n    <div className='p-3 mb-3 border rounded'>\n      <Row className='mb-3'>\n\n        <Col md={6}>\n          <div className='form-group'>\n            <label htmlFor='inputItem'>Select Plant</label>\n            <input className='form-control' type='text' list={id} value={plantArea.plant ? plantArea.plant : ''} onChange={(e) => handleChange(e, 'plant')} />\n            <datalist id={id}>\n              <ItemsAviable item={plantArea.plant ? plantArea.plant : ''} type='plants' />\n            </datalist>\n          </div>\n        </Col>\n        <Col md={{ span: 3, offset: 3 }}>\n          <button className='btn btn-danger form-control' onClick={handleDeletePlantArea}>Delete Area</button>\n        </Col>\n\n      </Row>\n\n      <LayerCoords\n        area={plantArea}\n        onChange={handleChange}\n      />\n\n    </div>\n\n  )\n}\n\nconst mapStateToProps = (reducers) => {\n  const { configurationReducer } = reducers\n  const { socket, selectedSocketId } = configurationReducer\n  return { socket, selectedSocketId }\n}\n\nexport default connect(mapStateToProps, null)(HarvestArea)\n","import { Button, Col, Row } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport { getBotBySocketId } from '../../actions/botsAction'\nimport HarvestArea from './HarvestArea'\n\nconst FarmerJob = (props) => {\n\n  const {\n    socket,\n    botsOnline,\n    selectedSocketId\n  } = props\n\n  const botConfig = botsOnline.find((e) => { return e.socketId === selectedSocketId })\n  if (botConfig === undefined) { return null }\n\n  const handleInsertNewPlantArea = (event) => {\n    socket.emit('sendAction', {\n      action: 'changeConfig',\n      socketId: botConfig.socketId,\n      value: {\n        configToChange: 'insertNewPlantArea'\n      }\n    })\n  }\n\n  const renderPlantAreas = () => {\n    return botConfig.config.plantAreas.map((plantArea, index) => {\n      return (\n        <HarvestArea key={index} id={index} plantArea={plantArea} />\n      )\n    })\n  }\n\n  return (\n    <>\n      <Row className='mb-3'>\n        <Col>\n          <h4>Insert areas and type of plant for harvest</h4>\n          {renderPlantAreas()}\n        </Col>\n      </Row>\n\n      <Row className='mb-5'>\n        <Col>\n          <Button\n            variant='success'\n            onClick={handleInsertNewPlantArea}\n          >\n            Insert New Area\n          </Button>\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nconst mapStateToProps = (reducers) => {\n  const { configurationReducer, botsReducer } = reducers\n  const { socket, selectedSocketId } = configurationReducer\n  const { botsOnline } = botsReducer\n\n  return { socket, selectedSocketId, botsOnline }\n}\n\nconst mapDispatchToProps = {\n  getBotBySocketId\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FarmerJob)\n","const MC_VERSION = \"1.8.1\";\n// export const mcAssets = require(\"minecraft-assets\")(MC_VERSION);\nexport const mcData = require('minecraft-data')(MC_VERSION)","import { Fragment } from 'react'\n\nimport { mcData } from \"../../utils/mc\";\n\nconst plants = [\n  { displayName: 'Carrot', name: 'carrot' },\n  { displayName: 'Potato', name: 'potato' },\n  { displayName: 'Beetroot', name: 'beetroot' },\n  { displayName: 'Wheat', name: 'wheat' },\n  { displayName: 'Melon', name: 'melon' },\n  { displayName: 'Sweet Berries', name: 'sweet_berries' },\n  { displayName: 'Pumpkin', name: 'pumpkin' },\n  { displayName: 'Oak Sapling', name: 'oak_sapling' },\n  { displayName: 'Cabirch Saplingrrot', name: 'cabirch_saplingrrot' },\n  { displayName: 'Jungle Sapling', name: 'jungle_sapling' },\n  { displayName: 'Acacia Sapling', name: 'acacia_sapling' },\n  { displayName: 'Dark Oak Sapling', name: 'dark_oak_sapling' },\n  { displayName: 'Spruce Sapling', name: 'spruce_sapling' },\n  { displayName: 'Cactus', name: 'cactus' },\n  { displayName: 'Bamboo', name: 'bamboo' },\n  { displayName: 'Sugar Cane', name: 'sugar_cane' },\n]\n\nconst ItemsAviable = (props) => {\n  const renderBlocks = () => {\n    let type\n    switch (props.type) {\n      case 'all':\n        type = 'itemsArray'\n        type = mcData.itemsArray\n        break\n      case 'foods':\n        type = 'foodsArray'\n        type = mcData.foodsArray\n        break\n      case 'plants':\n        type = 'foodsArray'\n        type = plants\n        break\n      default:\n        type = 'itemsArray'\n        type = mcData.itemsArray\n        break\n    }\n\n    const matchRegularExpression = new RegExp(props.item, 'gi')\n    const items = type.filter(itemIndex => {\n      return itemIndex.displayName.match(matchRegularExpression)\n    })\n\n    if (items.length > 10) {\n      items.splice(0, items.length - 10)\n    }\n\n    return items.map((item, index) => {\n      return <option key={index} value={item.name}>{item.displayName}</option>\n    })\n  }\n\n  return (\n    <>\n      {renderBlocks()}\n    </>\n  )\n}\n\nexport default ItemsAviable\n","import React from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\n\nconst LayerCoords = (props) => {\n    const {\n        onChange,\n        area,\n    } = props\n    return (\n        <Row>\n\n            <Form.Group as={Col} sm=\"4\" md=\"3\" lg=\"2\">\n                <Form.Label><span className='badge bg-primary text-white'>X Start</span></Form.Label>\n                <Form.Control\n                    type=\"text\"\n                    value={area.xStart}\n                    onChange={(e) => { onChange(e, 'xStart') }}\n                />\n            </Form.Group>\n\n            <Form.Group as={Col} sm=\"4\" md=\"3\" lg=\"2\">\n                <Form.Label><span className='badge bg-warning text-dark'>Y Layer</span></Form.Label>\n                <Form.Control\n                    type=\"text\"\n                    value={area.yLayer}\n                    onChange={(e) => { onChange(e, 'yLayer') }}\n                />\n            </Form.Group>\n\n            <Form.Group as={Col} sm=\"4\" md=\"3\" lg=\"2\">\n                <Form.Label><span class='badge bg-secondary text-white'>Z Start</span></Form.Label>\n                <Form.Control\n                    type=\"text\"\n                    value={area.zStart}\n                    onChange={(e) => { onChange(e, 'zStart') }}\n                />\n            </Form.Group>\n\n            <Form.Group as={Col} sm=\"4\" md=\"3\" lg=\"2\">\n                <Form.Label><span className='badge bg-primary text-white'>X End</span></Form.Label>\n                <Form.Control\n                    type=\"text\"\n                    value={area.xEnd}\n                    onChange={(e) => { onChange(e, 'xEnd') }}\n                />\n            </Form.Group>\n\n            <Form.Group as={Col} sm=\"4\" md=\"3\" lg=\"2\">\n                <Form.Label><span class='badge bg-secondary text-white'>Z End</span></Form.Label>\n                <Form.Control\n                    type=\"text\"\n                    value={area.zEnd}\n                    onChange={(e) => { onChange(e, 'zEnd') }}\n                />\n            </Form.Group>\n\n        </Row >\n    )\n}\n\nexport default LayerCoords;\n"],"names":["connect","reducers","configurationReducer","socket","selectedSocketId","props","id","plantArea","handleChange","event","type","copyPlant","target","value","emit","action","socketId","configToChange","className","Row","Col","md","htmlFor","list","plant","onChange","e","ItemsAviable","item","span","offset","onClick","LayerCoords","area","mapDispatchToProps","getBotBySocketId","botsReducer","botsOnline","botConfig","find","undefined","config","plantAreas","map","index","Button","variant","mcData","require","plants","displayName","name","itemsArray","foodsArray","matchRegularExpression","RegExp","items","filter","itemIndex","match","length","splice","renderBlocks","as","sm","lg","xStart","yLayer","class","zStart","xEnd","zEnd"],"sourceRoot":""}