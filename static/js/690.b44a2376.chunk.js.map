{"version":3,"file":"static/js/690.b44a2376.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/ProgressBar.js","components/RenderBotsOnlineList.jsx","components/BotActionsButtons.jsx","pages/Dashboard.jsx"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ROUND_PRECISION = 1000;\n/**\n * Validate that children, if any, are instances of `<ProgressBar>`.\n */\n\nfunction onlyProgressBar(props, propName, componentName) {\n  const children = props[propName];\n\n  if (!children) {\n    return null;\n  }\n\n  let error = null;\n  React.Children.forEach(children, child => {\n    if (error) {\n      return;\n    }\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n    const element = /*#__PURE__*/_jsx(ProgressBar, {});\n\n    if (child.type === element.type) return;\n    const childType = child.type;\n    const childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(`Children of ${componentName} can contain only ProgressBar ` + `components. Found ${childIdentifier}.`);\n  });\n  return error;\n}\n\nconst defaultProps = {\n  min: 0,\n  max: 100,\n  animated: false,\n  isChild: false,\n  visuallyHidden: false,\n  striped: false\n};\n\nfunction getPercentage(now, min, max) {\n  const percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\n\nfunction renderProgressBar({\n  min,\n  now,\n  max,\n  label,\n  visuallyHidden,\n  striped,\n  animated,\n  className,\n  style,\n  variant,\n  bsPrefix,\n  ...props\n}, ref) {\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...props,\n    role: \"progressbar\",\n    className: classNames(className, `${bsPrefix}-bar`, {\n      [`bg-${variant}`]: variant,\n      [`${bsPrefix}-bar-animated`]: animated,\n      [`${bsPrefix}-bar-striped`]: animated || striped\n    }),\n    style: {\n      width: `${getPercentage(now, min, max)}%`,\n      ...style\n    },\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    children: visuallyHidden ? /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: label\n    }) : label\n  });\n}\n\nconst ProgressBar = /*#__PURE__*/React.forwardRef(({\n  isChild,\n  ...props\n}, ref) => {\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n\n  const {\n    min,\n    now,\n    max,\n    label,\n    visuallyHidden,\n    striped,\n    animated,\n    bsPrefix,\n    variant,\n    className,\n    children,\n    ...wrapperProps\n  } = props;\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...wrapperProps,\n    className: classNames(className, bsPrefix),\n    children: children ? map(children, child => /*#__PURE__*/cloneElement(child, {\n      isChild: true\n    })) : renderProgressBar({\n      min,\n      now,\n      max,\n      label,\n      visuallyHidden,\n      striped,\n      animated,\n      bsPrefix,\n      variant\n    }, ref)\n  });\n});\nProgressBar.displayName = 'ProgressBar';\nProgressBar.defaultProps = defaultProps;\nexport default ProgressBar;","import { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport '../css/botlist.css'\nimport ProgressBar from 'react-bootstrap/ProgressBar'\nimport { setSelectedSocketId } from '../actions/configurationAction'\n\nconst RenderBotsOnlineList = ({ selectedSocketId, setSelectedSocketId, botsOnline }) => {\n  useEffect(() => {\n    const handleEsc = (event) => {\n      if (event.keyCode === 27) {\n        setSelectedSocketId(undefined)\n      }\n    }\n    window.addEventListener('keydown', handleEsc)\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc)\n    }\n  }, [setSelectedSocketId])\n\n  const renderBotList = () => {\n    return (\n      botsOnline.map((bot) => {\n        return (\n          <li key={bot.socketId} className={`list-group-item ${(bot.combat) ? 'botlistCombat' : 'botlist'}`}>\n            <div className={` ${(bot.combat) ? 'botCombat' : ''}`}>\n              <span className={`pointer ${selectedSocketId === bot.socketId ? 'is-selected' : ''}`} onClick={() => { setSelectedSocketId(bot.socketId) }}>{bot.name}</span>\n              <div>\n                <ProgressBar className='mt-1' variant='danger' now={bot.health / 20 * 100} />\n                <ProgressBar className='mt-1' variant='warning' now={bot.food / 20 * 100} />\n              </div>\n            </div>\n          </li>\n        )\n      })\n\n    )\n  }\n\n  return (\n    <ul className='list-group'>\n      <li className='list-group-item active'>Bots Online ({botsOnline.length})</li>\n      {renderBotList()}\n    </ul>\n  )\n}\n\nconst mapStateToProps = (reducers) => {\n  const { botsReducer, configurationReducer } = reducers\n  const { botsOnline } = botsReducer\n  const { selectedSocketId } = configurationReducer\n  return { botsOnline, selectedSocketId }\n}\n\nconst mapDispatchToProps = {\n  setSelectedSocketId\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RenderBotsOnlineList)\n","import React, { useState, Fragment } from \"react\";\nimport { Button, Col, Row } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { useNavigate } from \"react-router\";\nimport { updateBotStatus, getBotBySocketId } from \"../actions/botsAction\";\n\nconst BotActionButtons = (props) => {\n  const navigation = useNavigate();\n  const [chat, setChat] = useState(\"\");\n\n  const handleChangeMessage = (event) => {\n    setChat(event.target.value);\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.charCode === 13) {\n      handleSendMessageButton();\n    }\n  };\n\n  const handleSendMessageButton = () => {\n    handleSendAction(\"sendMessage\", chat);\n    setChat(\"\");\n  };\n\n  const handleDisconnectButton = () => {\n    props.socket.emit(\"sendAction\", {\n      action: \"sendDisconnect\",\n      socketId: props.socketId,\n      value: \"Disconnect Bot\",\n    });\n    navigation(\"/\");\n  };\n\n  const handleStartStateMachineButton = () => {\n    const bot = props.getBotBySocketId(props.socketId);\n    if (bot.stateMachinePort === null) {\n      const port = Math.floor(Math.random() * 50 + 1) + 4500;\n      props.socket.emit(\"sendAction\", {\n        action: \"startStateMachine\",\n        socketId: props.socketId,\n        value: {\n          port,\n        },\n      });\n      bot.stateMachinePort = port;\n      props.updateBotStatus(bot);\n    }\n    window.open(`http://${props.serverBots}:${bot.stateMachinePort}`, \"_blank\");\n  };\n\n  const handleStartInventoryButton = () => {\n    const bot = props.getBotBySocketId(props.socketId);\n    if (bot.inventoryPort === null) {\n      const port = Math.floor(Math.random() * 50 + 1) + 4500;\n      props.socket.emit(\"sendAction\", {\n        action: \"startInventory\",\n        socketId: props.socketId,\n        value: {\n          port,\n        },\n      });\n      bot.inventoryPort = port;\n      props.updateBotStatus(bot);\n    }\n    window.open(`http://${props.serverBots}:${bot.inventoryPort}`, \"_blank\");\n  };\n\n  const handleStartViewerButton = () => {\n    const bot = props.getBotBySocketId(props.socketId);\n    if (bot.viewerPort === null) {\n      const port = Math.floor(Math.random() * 50 + 1) + 4500;\n      props.socket.emit(\"sendAction\", {\n        action: \"startViewer\",\n        socketId: props.socketId,\n        value: {\n          port,\n        },\n      });\n      bot.viewerPort = port;\n      props.updateBotStatus(bot);\n    }\n    window.open(`http://${props.serverBots}:${bot.viewerPort}`, \"_blank\");\n  };\n\n  const handleSendAction = (type, value) => {\n    props.socket.emit(\"sendAction\", {\n      action: \"action\",\n      socketId: props.selectedSocketId,\n      toBotData: {\n        type: type,\n        value: value,\n      },\n    });\n  };\n\n  return (\n    <>\n\n      <Row className=\"mb-3\">\n        <Col>\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              placeholder=\"Send chat message\"\n              className=\"form-control\"\n              onKeyPress={handleKeyPress}\n              onChange={handleChangeMessage}\n              value={chat}\n            />\n          </div>\n        </Col>\n      </Row>\n\n      <Row className=\"mb-3\">\n        <Col>\n          <Button onClick={handleSendMessageButton} className='mb-1'>\n            Send Message\n          </Button>\n          {' '}\n          <Button onClick={handleStartStateMachineButton} className='mb-1'>\n            Show State Machine\n          </Button>\n          {' '}\n          <Button onClick={handleStartInventoryButton} variant='success' className='mb-1'>\n            Show Item Inventory\n          </Button>\n          {' '}\n          <Button onClick={handleStartViewerButton} variant='success' className='mb-1'>\n            Show Viewer\n          </Button>\n          {' '}\n          <Button onClick={handleDisconnectButton} variant='danger' className='mb-1'>\n            Disconnect\n          </Button>\n        </Col>\n      </Row>\n\n      <Row className=\"mb-3\">\n        <Col>\n          <Button onClick={() => handleSendAction(\"stay\", \"\")} variant='secondary'>\n            Stay\n          </Button>\n          {' '}\n          <Button onClick={() => handleSendAction(\"follow\", props.master)} variant='secondary'>\n            Follow Master\n          </Button>\n          {' '}\n          <Button onClick={() => handleSendAction(\"endCommands\", \"\")} variant='warning'>\n            End commands\n          </Button>\n        </Col>\n      </Row>\n\n      <Row className=\"mb-3\">\n        <Col md={4}>\n\n          <Row className=\"mb-3\">\n\n            <Col xs={{ span: 4, offset: 4 }} className=\"d-grid\">\n              <Button onClick={() => handleSendAction(\"moveOneByOne\", \"x+\")} variant='secondary'>\n                X+\n              </Button>\n            </Col>\n\n          </Row>\n\n          <Row>\n\n            <Col xs={4} className=\"d-grid mb-3\">\n              <Button onClick={() => handleSendAction(\"moveOneByOne\", \"z-\")} variant='secondary'>\n                Z-\n              </Button>\n            </Col>\n\n            <Col xs={4} className=\"d-grid mb-3\">\n              <Button onClick={() => handleSendAction(\"moveOneByOne\", \"x-\")} variant='secondary'>\n                X-\n              </Button>\n            </Col>\n\n            <Col xs={4} className=\"d-grid mb-3\">\n              <Button onClick={() => handleSendAction(\"moveOneByOne\", \"z+\")} variant='secondary'>\n                Z+\n              </Button>\n            </Col>\n\n          </Row>\n        </Col>\n\n        <Col md={2} className='d-grid mb-3'>\n          <Button onClick={() => handleSendAction(\"interactWithPlayer\", \"\")} variant='secondary'>\n            Interact With Player\n          </Button>\n        </Col>\n        <Col md={2} className='d-grid mb-3'>\n          <Button onClick={() => handleSendAction(\"interactWithBed\", \"\")} variant='secondary'>\n            Interect With Bed\n          </Button>\n        </Col>\n        <Col md={2} className='d-grid mb-3'>\n          <Button onClick={() => handleSendAction(\"tossAllItems\", \"\")} variant='danger'>\n          Toss all items\n          </Button>\n        </Col>\n      </Row >\n\n    </>\n  );\n};\n\nconst mapStateToProps = (reducers) => {\n  const { configurationReducer } = reducers;\n  const { socket, selectedSocketId, serverBots, master } = configurationReducer;\n\n  return { socket, selectedSocketId, serverBots, master };\n};\n\nconst mapDispatchToProps = {\n  updateBotStatus,\n  getBotBySocketId,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BotActionButtons);\n","import { useEffect, useRef } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport RenderBotsOnlineList from '../components/RenderBotsOnlineList'\nimport BotActionsButtons from '../components/BotActionsButtons'\nimport { getBotIndexBySocketId } from '../actions/botsAction'\nimport { setSelectedSocketId } from '../actions/configurationAction'\nimport { Button, Col, Row } from 'react-bootstrap'\n\nconst Dashboard = ({ logs, selectedSocketId, socketId, getBotIndexBySocketId, match, botsOnline, setSelectedSocketId }) => {\n    const messagesEndRef = useRef(null)\n\n    useEffect(() => {\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\n    }, [logs]);\n\n    useEffect(() => {\n        if (getBotIndexBySocketId(selectedSocketId) < 0) {\n            setSelectedSocketId(undefined)\n        }\n    }, [botsOnline, selectedSocketId, getBotIndexBySocketId, setSelectedSocketId])\n\n    return (\n        <>\n            <Row className='mt-3'>\n                <Col md={8} className='mb-3'>\n                    <h1>Dashboard</h1>\n                </Col>\n\n                <Col md={2} className='mb-3'>\n                    {!selectedSocketId ? '' :\n                        <Button\n                            as={Link}\n                            to='/configurebot/generalconfig'\n                            variant='warning'\n                        >\n                            Configure Bot\n                        </Button>\n                    }\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xs={{ span: 12, order: 2 }} md={{ span: 9, order: 1 }} lg={10}>\n\n                    <Row className='mb-3'>\n                        <Col xs={12}>\n                            <div className='form-group'>\n                                <div className='textAreaStyle form-control'>\n                                    {\n                                        logs.filter(log => {\n                                            if (!selectedSocketId) return true\n                                            return log.socketId === selectedSocketId\n                                        }).map((log, key) => <div key={key}>{log.time} {log.botName} {log.message}</div>)\n                                    }\n                                    <div ref={messagesEndRef} />\n                                </div>\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col xs={12}>\n                            {selectedSocketId ?\n                                <BotActionsButtons socketId={selectedSocketId} /> :\n                                <div className='pendingSelectBot'>Select any bot for do actions</div>\n                            }\n                        </Col>\n                    </Row>\n\n                </Col>\n                <Col xs={{ span: 12, order: 1 }} md={{ span: 3, order: 2 }} lg={2} className='mb-3'>\n                    <RenderBotsOnlineList />\n                </Col>\n            </Row>\n        </>\n    )\n\n}\n\nconst mapStateToProps = (reducers) => {\n    const { botsReducer, configurationReducer } = reducers\n    const { botsOnline, logs } = botsReducer\n    const { selectedSocketId } = configurationReducer\n\n    return { botsOnline, logs, selectedSocketId }\n}\n\n\nconst mapDispatchToProps = {\n    getBotIndexBySocketId,\n    setSelectedSocketId\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n"],"names":["getPercentage","now","min","max","percentage","Math","round","renderProgressBar","ref","label","visuallyHidden","striped","animated","className","style","variant","bsPrefix","props","_jsx","role","classNames","width","children","ProgressBar","React","isChild","useBootstrapPrefix","wrapperProps","map","child","cloneElement","displayName","defaultProps","mapDispatchToProps","setSelectedSocketId","connect","reducers","botsReducer","configurationReducer","botsOnline","selectedSocketId","useEffect","handleEsc","event","keyCode","undefined","window","addEventListener","removeEventListener","length","bot","combat","socketId","onClick","name","health","food","updateBotStatus","getBotBySocketId","socket","serverBots","master","navigation","useNavigate","useState","chat","setChat","handleSendMessageButton","handleSendAction","type","value","emit","action","toBotData","Row","Col","placeholder","onKeyPress","charCode","onChange","target","Button","stateMachinePort","port","floor","random","open","inventoryPort","viewerPort","md","xs","span","offset","getBotIndexBySocketId","logs","match","messagesEndRef","useRef","current","scrollIntoView","behavior","as","Link","to","order","lg","filter","log","key","time","botName","message","BotActionsButtons","RenderBotsOnlineList"],"sourceRoot":""}