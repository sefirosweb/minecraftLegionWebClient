{"version":3,"file":"static/js/388.3347e652.chunk.js","mappings":"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","sources":["components/configurebot/GeneralConfig.jsx","components/configurebot/Icons/ArrowDown.jsx","components/configurebot/Icons/ArrowUp.jsx","components/configurebot/Icons/Trash.jsx","components/forms/FormCheck.jsx"],"sourcesContent":["import { Fragment, lazy, Suspense, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getBotBySocketId } from \"../../actions/botsAction\";\nimport TrashIcon from \"./Icons/Trash\";\nimport ArrowUp from \"./Icons/ArrowUp\";\nimport ArrowDown from \"./Icons/ArrowDown\";\nimport FormCheck from \"../forms/FormCheck\";\n\nconst ItemsAviable = lazy(() => import(\"./ItemsAviable\"))\n\nconst GeneralConfig = (props) => {\n  const [item, setItem] = useState(\"\");\n  const botConfig = props.getBotBySocketId(props.selectedSocketId);\n\n  if (botConfig === undefined) {\n    return null;\n  }\n\n  const changeConfig = (configToChange, value) => {\n    props.socket.emit(\"sendAction\", {\n      action: \"changeConfig\",\n      socketId: botConfig.socketId,\n      value: {\n        configToChange,\n        value,\n      },\n    });\n  };\n\n  const handleItemChange = (event) => {\n    setItem(event.target.value);\n  };\n\n  const handleInsertItem = (event) => {\n    if (item === \"\") {\n      return null;\n    }\n\n    changeConfig(\"InsertItemCanBeEat\", { item });\n  };\n\n  const renderItemsTable = () => {\n    return botConfig.config.itemsCanBeEat.map((food, index) => {\n      return (\n        <tr key={index}>\n          <th scope=\"row\">{index + 1}</th>\n          <td>{food}</td>\n          <td>\n            <ArrowUp\n              onClick={() => changeConfig(\"moveItemCanBeEatPrev\", index)}\n            />{\" \"}\n            <ArrowDown\n              onClick={() => changeConfig(\"moveItemCanBeEatNext\", index)}\n            />\n          </td>\n          <td>\n            <TrashIcon\n              onClick={() => changeConfig(\"deleteItemCanBeEat\", index)}\n            />\n          </td>\n        </tr>\n      );\n    });\n  };\n\n  const handleChangeJob = (event) => {\n    changeConfig(\"job\", event.target.value);\n  };\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-7\">\n          <fieldset className=\"form-group row\">\n            <legend className=\"col-form-label col-sm-4 float-sm-left pt-0\">\n              Job\n            </legend>\n            <div className=\"col-sm-2\">\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"gridJob\"\n                  value=\"none\"\n                  onChange={handleChangeJob}\n                  checked={botConfig.config.job === \"none\"}\n                />\n                <label className=\"form-check-label\">None</label>\n              </div>\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"gridJob\"\n                  value=\"miner\"\n                  onChange={handleChangeJob}\n                  checked={botConfig.config.job === \"miner\"}\n                />\n                <label className=\"form-check-label\">Miner</label>\n              </div>\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"gridJob\"\n                  value=\"guard\"\n                  onChange={handleChangeJob}\n                  checked={botConfig.config.job === \"guard\"}\n                />\n                <label className=\"form-check-label\">Guard</label>\n              </div>\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"gridJob\"\n                  value=\"crafter\"\n                  onChange={handleChangeJob}\n                  checked={botConfig.config.job === \"crafter\"}\n                />\n                <label className=\"form-check-label\">Crafter</label>\n              </div>\n            </div>\n            <div className=\"col-sm-2\">\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"gridJob\"\n                  value=\"farmer\"\n                  onChange={handleChangeJob}\n                  checked={botConfig.config.job === \"farmer\"}\n                />\n                <label className=\"form-check-label\">Farmer</label>\n              </div>\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"gridJob\"\n                  value=\"breeder\"\n                  onChange={handleChangeJob}\n                  checked={botConfig.config.job === \"breeder\"}\n                />\n                <label className=\"form-check-label\">Breeder</label>\n              </div>\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"gridJob\"\n                  value=\"sorter\"\n                  onChange={handleChangeJob}\n                  checked={botConfig.config.job === \"sorter\"}\n                />\n                <label className=\"form-check-label\">Sorter</label>\n              </div>\n            </div>\n          </fieldset>\n\n          <FormCheck\n            id={\"pickUpItems\"}\n            onChange={() =>\n              changeConfig(\"pickUpItems\", !botConfig.config.pickUpItems)\n            }\n            label={`Pick up items?`}\n            checked={botConfig.config.pickUpItems}\n          />\n\n          <FormCheck\n            id={\"randomFarmArea\"}\n            onChange={() =>\n              changeConfig(\"randomFarmArea\", !botConfig.config.randomFarmArea)\n            }\n            label={`Random Farmer area?`}\n            checked={botConfig.config.randomFarmArea}\n          />\n        </div>\n\n        <div className=\"col-5\">\n          <FormCheck\n            id={\"allowSprinting\"}\n            onChange={() =>\n              changeConfig(\"allowSprinting\", !botConfig.config.allowSprinting)\n            }\n            label={`Allow Sprint`}\n            checked={botConfig.config.allowSprinting}\n          />\n\n          <FormCheck\n            id={\"allowScanDigprinting\"}\n            onChange={() => changeConfig(\"canDig\", !botConfig.config.canDig)}\n            label={\n              <>\n                Can dig? <br /> (!) Caution can stuck the bot\n              </>\n            }\n            checked={botConfig.config.canDig}\n          />\n\n          <FormCheck\n            id={\"allowCanPlaceBlocks\"}\n            onChange={() => changeConfig(\"canPlaceBlocks\", !botConfig.config.canPlaceBlocks)}\n            label={\n              <>\n                Can place blosk? <br /> (!) Caution can stuck the bot\n              </>\n            }\n            checked={botConfig.config.canPlaceBlocks}\n          />\n\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <h3>Valid food for eat</h3>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <div className=\"form-group\">\n            <label htmlFor=\"inputItem\">\n              (!) The food consumition have priority based on # inserted\n            </label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              list=\"itemsList\"\n              value={item}\n              onChange={handleItemChange}\n            />\n            <datalist id=\"itemsList\">\n              <Suspense fallback={\n                <option>Loading...</option>\n              }>\n                <ItemsAviable item={item} type=\"foods\" />\n              </Suspense>\n            </datalist>\n          </div>\n        </div>\n\n        <div className=\"col-2\">\n          <div className=\"form-group\">\n            <label>.</label>\n            <button\n              className=\"form-control btn btn-primary\"\n              onClick={handleInsertItem}\n            >\n              Insert\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <table className=\"table\">\n            <thead className=\"thead-dark\">\n              <tr>\n                <th scope=\"col\">Priority</th>\n                <th scope=\"col\">Food</th>\n                <th scope=\"col\">Move</th>\n                <th scope=\"col\" />\n              </tr>\n            </thead>\n            <tbody>{renderItemsTable()}</tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (reducers) => {\n  const { botsReducer, configurationReducer } = reducers;\n  const { botsOnline } = botsReducer;\n  const { socket, selectedSocketId } = configurationReducer;\n\n  return { botsOnline, socket, selectedSocketId };\n};\n\nconst mapDispatchToProps = {\n  getBotBySocketId,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GeneralConfig);\n","const ArrowDown = (props) => {\n  return (\n    <button type='button' className='btn btn-secondary' onClick={props.onClick}>\n      <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' className='bi bi-arrow-down-short' viewBox='0 0 16 16'>\n        <path fillRule='evenodd' d='M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4z' />\n      </svg>\n    </button>\n  )\n}\n\nexport default ArrowDown\n","const ArrowUp = (props) => {\n  return (\n    <button type='button' className='btn btn-secondary' onClick={props.onClick}>\n      <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' className='bi bi-arrow-up-short' viewBox='0 0 16 16'>\n        <path fillRule='evenodd' d='M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5z' />\n      </svg>\n    </button>\n  )\n}\n\nexport default ArrowUp\n","const Trash = (props) => {\n  return (\n    <button type='button' className='btn btn-secondary' onClick={props.onClick}>\n      <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' className='bi bi-trash' viewBox='0 0 16 16'>\n        <path d='M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z' />\n        <path fillRule='evenodd' d='M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z' />\n      </svg>\n      <span className='visually-hidden' />\n    </button>\n  )\n}\n\nexport default Trash\n","import React from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\n\n\n\nconst FormCheck = ({ id, checked, label, onChange }) => {\n    return (\n        <Form>\n            <Form.Group\n                as={Row}\n                className=\"mb-3\"\n                controlId=\"formPlaintextEmail\"\n            >\n                <Form.Label column sm=\"4\">\n                    {label}\n                </Form.Label>\n\n                <Col sm=\"8\">\n                    <Form.Check\n                        type=\"switch\"\n                        id={id}\n                        checked={checked}\n                        label={checked === true ? \"Yes\" : \"No\"}\n                        onChange={onChange}\n                    />\n                </Col>\n            </Form.Group>\n        </Form>\n    )\n}\n\nexport default FormCheck;\n"],"names":["ItemsAviable","lazy","mapDispatchToProps","getBotBySocketId","connect","reducers","botsReducer","configurationReducer","botsOnline","socket","selectedSocketId","props","useState","item","setItem","botConfig","undefined","changeConfig","configToChange","value","emit","action","socketId","handleChangeJob","event","target","className","type","name","onChange","checked","config","job","id","pickUpItems","label","randomFarmArea","allowSprinting","canDig","canPlaceBlocks","htmlFor","list","Suspense","fallback","onClick","scope","itemsCanBeEat","map","food","index","xmlns","width","height","fill","viewBox","fillRule","d","as","Row","controlId","column","sm"],"sourceRoot":""}