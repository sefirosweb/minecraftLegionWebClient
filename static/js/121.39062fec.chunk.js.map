{"version":3,"file":"static/js/121.39062fec.chunk.js","mappings":"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","sources":["components/forms/Coords.jsx","components/configurebot/GeneralConfig.jsx","components/configurebot/Icons/ArrowDown.jsx","components/configurebot/Icons/ArrowUp.jsx","components/configurebot/Icons/Trash.jsx","components/forms/FormCheck.jsx"],"sourcesContent":["import React from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\n\nconst Coords = (props) => {\n    const {\n        label = '',\n        onChange,\n        coords,\n    } = props\n    return (\n        <>\n            {\n                label ?\n                    <Row className='mb-2'>\n                        <Col>\n                            {label}\n                        </Col>\n                    </Row>\n                    : ''\n            }\n\n            <Row>\n                <Form.Group as={Col} sm=\"4\" md=\"3\" lg=\"2\">\n                    <Form.Label><span className='badge bg-primary text-white'>X</span></Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        value={coords.x}\n                        onChange={(e) => { onChange(e, 'x') }}\n                    />\n                </Form.Group>\n\n                <Form.Group as={Col} sm=\"4\" md=\"3\" lg=\"2\">\n                    <Form.Label><span className='badge bg-warning text-dark'>Y</span></Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        value={coords.y}\n                        onChange={(e) => { onChange(e, 'y') }}\n                    />\n                </Form.Group>\n\n                <Form.Group as={Col} sm=\"4\" md=\"3\" lg=\"2\">\n                    <Form.Label><span className='badge bg-secondary text-white'>Z</span></Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        value={coords.z}\n                        onChange={(e) => { onChange(e, 'z') }}\n                    />\n                </Form.Group>\n            </Row>\n        </>\n    )\n}\n\nexport default Coords;\n","import { Fragment, lazy, Suspense, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getBotBySocketId } from \"../../actions/botsAction\";\nimport TrashIcon from \"./Icons/Trash\";\nimport ArrowUp from \"./Icons/ArrowUp\";\nimport ArrowDown from \"./Icons/ArrowDown\";\nimport FormCheck from \"../forms/FormCheck\";\nimport Coords from \"../forms/Coords\";\n\nconst ItemsAviable = lazy(() => import(\"./ItemsAviable\"))\n\nconst GeneralConfig = (props) => {\n  const { socket } = props\n\n  const [item, setItem] = useState(\"\");\n  const botConfig = props.getBotBySocketId(props.selectedSocketId);\n\n  if (botConfig === undefined) {\n    return null;\n  }\n\n  const changeConfig = (configToChange, value) => {\n    socket.emit(\"sendAction\", {\n      action: \"changeConfig\",\n      socketId: botConfig.socketId,\n      value: {\n        configToChange,\n        value,\n      },\n    });\n  };\n\n  const handleItemChange = (event) => {\n    setItem(event.target.value);\n  };\n\n  const handleInsertItem = (event) => {\n    if (item === \"\") {\n      return null;\n    }\n\n    changeConfig(\"InsertItemCanBeEat\", { item });\n  };\n\n  const renderItemsTable = () => {\n    return botConfig.config.itemsCanBeEat.map((food, index) => {\n      return (\n        <tr key={index}>\n          <th scope=\"row\">{index + 1}</th>\n          <td>{food}</td>\n          <td>\n            <ArrowUp\n              onClick={() => changeConfig(\"moveItemCanBeEatPrev\", index)}\n            />{\" \"}\n            <ArrowDown\n              onClick={() => changeConfig(\"moveItemCanBeEatNext\", index)}\n            />\n          </td>\n          <td>\n            <TrashIcon\n              onClick={() => changeConfig(\"deleteItemCanBeEat\", index)}\n            />\n          </td>\n        </tr>\n      );\n    });\n  };\n\n  const handleChangeJob = (event) => {\n    changeConfig(\"job\", event.target.value);\n  };\n\n  const handleChangeSleepArea = (event, coord) => {\n    const pos = Number(event.target.value)\n\n    if (!Number.isInteger(pos) && event.target.value !== '-') {\n      return null\n    }\n\n    socket.emit('sendAction', {\n      action: 'changeConfig',\n      socketId: botConfig.socketId,\n      value: {\n        configToChange: 'sleepArea',\n        value: {\n          coord,\n          pos: event.target.value\n        }\n      }\n    })\n  }\n\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-7\">\n          <fieldset className=\"form-group row\">\n            <legend className=\"col-form-label col-sm-4 float-sm-left pt-0\">\n              Job\n            </legend>\n            <div className=\"col-sm-2\">\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"gridJob\"\n                  value=\"none\"\n                  onChange={handleChangeJob}\n                  checked={botConfig.config.job === \"none\"}\n                />\n                <label className=\"form-check-label\">None</label>\n              </div>\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"gridJob\"\n                  value=\"miner\"\n                  onChange={handleChangeJob}\n                  checked={botConfig.config.job === \"miner\"}\n                />\n                <label className=\"form-check-label\">Miner</label>\n              </div>\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"gridJob\"\n                  value=\"guard\"\n                  onChange={handleChangeJob}\n                  checked={botConfig.config.job === \"guard\"}\n                />\n                <label className=\"form-check-label\">Guard</label>\n              </div>\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"gridJob\"\n                  value=\"crafter\"\n                  onChange={handleChangeJob}\n                  checked={botConfig.config.job === \"crafter\"}\n                />\n                <label className=\"form-check-label\">Crafter</label>\n              </div>\n            </div>\n            <div className=\"col-sm-2\">\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"gridJob\"\n                  value=\"farmer\"\n                  onChange={handleChangeJob}\n                  checked={botConfig.config.job === \"farmer\"}\n                />\n                <label className=\"form-check-label\">Farmer</label>\n              </div>\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"gridJob\"\n                  value=\"breeder\"\n                  onChange={handleChangeJob}\n                  checked={botConfig.config.job === \"breeder\"}\n                />\n                <label className=\"form-check-label\">Breeder</label>\n              </div>\n              <div className=\"form-check\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"radio\"\n                  name=\"gridJob\"\n                  value=\"sorter\"\n                  onChange={handleChangeJob}\n                  checked={botConfig.config.job === \"sorter\"}\n                />\n                <label className=\"form-check-label\">Sorter</label>\n              </div>\n            </div>\n          </fieldset>\n\n          <FormCheck\n            id={\"pickUpItems\"}\n            onChange={() =>\n              changeConfig(\"pickUpItems\", !botConfig.config.pickUpItems)\n            }\n            label={`Pick up items?`}\n            checked={botConfig.config.pickUpItems}\n          />\n\n          <FormCheck\n            id={\"randomFarmArea\"}\n            onChange={() =>\n              changeConfig(\"randomFarmArea\", !botConfig.config.randomFarmArea)\n            }\n            label={`Random Farmer area?`}\n            checked={botConfig.config.randomFarmArea}\n          />\n\n          <FormCheck\n            id={\"canSleep\"}\n            onChange={() =>\n              changeConfig(\"canSleep\", !botConfig.config.canSleep)\n            }\n            label={`Can sleep`}\n            checked={botConfig.config.canSleep}\n          />\n\n          <Coords\n            label='Coords'\n            coords={{\n              x: botConfig.config.sleepArea.x,\n              y: botConfig.config.sleepArea.y,\n              z: botConfig.config.sleepArea.z\n            }}\n            onChange={handleChangeSleepArea}\n          />\n        </div>\n\n        <div className=\"col-5\">\n          <FormCheck\n            id={\"allowSprinting\"}\n            onChange={() =>\n              changeConfig(\"allowSprinting\", !botConfig.config.allowSprinting)\n            }\n            label={`Allow Sprint`}\n            checked={botConfig.config.allowSprinting}\n          />\n\n          <FormCheck\n            id={\"allowScanDigprinting\"}\n            onChange={() => changeConfig(\"canDig\", !botConfig.config.canDig)}\n            label={\n              <>\n                Can dig? <br /> (!) Caution can stuck the bot\n              </>\n            }\n            checked={botConfig.config.canDig}\n          />\n\n          <FormCheck\n            id={\"allowCanPlaceBlocks\"}\n            onChange={() => changeConfig(\"canPlaceBlocks\", !botConfig.config.canPlaceBlocks)}\n            label={\n              <>\n                Can place blosk? <br /> (!) Caution can stuck the bot\n              </>\n            }\n            checked={botConfig.config.canPlaceBlocks}\n          />\n\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <h3>Valid food for eat</h3>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <div className=\"form-group\">\n            <label htmlFor=\"inputItem\">\n              (!) The food consumition have priority based on # inserted\n            </label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              list=\"itemsList\"\n              value={item}\n              onChange={handleItemChange}\n            />\n            <datalist id=\"itemsList\">\n              <Suspense fallback={\n                <option>Loading...</option>\n              }>\n                <ItemsAviable item={item} type=\"foods\" />\n              </Suspense>\n            </datalist>\n          </div>\n        </div>\n\n        <div className=\"col-2\">\n          <div className=\"form-group\">\n            <label>.</label>\n            <button\n              className=\"form-control btn btn-primary\"\n              onClick={handleInsertItem}\n            >\n              Insert\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <table className=\"table\">\n            <thead className=\"thead-dark\">\n              <tr>\n                <th scope=\"col\">Priority</th>\n                <th scope=\"col\">Food</th>\n                <th scope=\"col\">Move</th>\n                <th scope=\"col\" />\n              </tr>\n            </thead>\n            <tbody>{renderItemsTable()}</tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (reducers) => {\n  const { botsReducer, configurationReducer } = reducers;\n  const { botsOnline } = botsReducer;\n  const { socket, selectedSocketId } = configurationReducer;\n\n  return { botsOnline, socket, selectedSocketId };\n};\n\nconst mapDispatchToProps = {\n  getBotBySocketId,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GeneralConfig);\n","const ArrowDown = (props) => {\n  return (\n    <button type='button' className='btn btn-secondary' onClick={props.onClick}>\n      <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' className='bi bi-arrow-down-short' viewBox='0 0 16 16'>\n        <path fillRule='evenodd' d='M8 4a.5.5 0 0 1 .5.5v5.793l2.146-2.147a.5.5 0 0 1 .708.708l-3 3a.5.5 0 0 1-.708 0l-3-3a.5.5 0 1 1 .708-.708L7.5 10.293V4.5A.5.5 0 0 1 8 4z' />\n      </svg>\n    </button>\n  )\n}\n\nexport default ArrowDown\n","const ArrowUp = (props) => {\n  return (\n    <button type='button' className='btn btn-secondary' onClick={props.onClick}>\n      <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' className='bi bi-arrow-up-short' viewBox='0 0 16 16'>\n        <path fillRule='evenodd' d='M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5z' />\n      </svg>\n    </button>\n  )\n}\n\nexport default ArrowUp\n","const Trash = (props) => {\n  return (\n    <button type='button' className='btn btn-secondary' onClick={props.onClick}>\n      <svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' className='bi bi-trash' viewBox='0 0 16 16'>\n        <path d='M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z' />\n        <path fillRule='evenodd' d='M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z' />\n      </svg>\n      <span className='visually-hidden' />\n    </button>\n  )\n}\n\nexport default Trash\n","import React from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\n\n\n\nconst FormCheck = ({ id, checked, label, onChange }) => {\n    return (\n        <Form>\n            <Form.Group\n                as={Row}\n                className=\"mb-3\"\n                controlId=\"formPlaintextEmail\"\n            >\n                <Form.Label column sm=\"4\">\n                    {label}\n                </Form.Label>\n\n                <Col sm=\"8\">\n                    <Form.Check\n                        type=\"switch\"\n                        id={id}\n                        checked={checked}\n                        label={checked === true ? \"Yes\" : \"No\"}\n                        onChange={onChange}\n                    />\n                </Col>\n            </Form.Group>\n        </Form>\n    )\n}\n\nexport default FormCheck;\n"],"names":["props","label","onChange","coords","Row","className","Col","Form","as","sm","md","lg","type","value","x","e","y","z","ItemsAviable","lazy","mapDispatchToProps","getBotBySocketId","connect","reducers","botsReducer","configurationReducer","botsOnline","socket","selectedSocketId","useState","item","setItem","botConfig","undefined","changeConfig","configToChange","emit","action","socketId","handleChangeJob","event","target","name","checked","config","job","FormCheck","id","pickUpItems","randomFarmArea","canSleep","sleepArea","coord","pos","Number","isInteger","allowSprinting","canDig","canPlaceBlocks","htmlFor","list","Suspense","fallback","onClick","scope","itemsCanBeEat","map","food","index","ArrowUp","ArrowDown","Trash","xmlns","width","height","fill","viewBox","fillRule","d","controlId","column"],"sourceRoot":""}