{"version":3,"file":"static/js/481.1d90828c.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/ProgressBar.js","components/RenderBotsOnlineList.jsx","components/configurebot/ConfigureBotLayout.jsx"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ROUND_PRECISION = 1000;\n/**\n * Validate that children, if any, are instances of `<ProgressBar>`.\n */\n\nfunction onlyProgressBar(props, propName, componentName) {\n  const children = props[propName];\n\n  if (!children) {\n    return null;\n  }\n\n  let error = null;\n  React.Children.forEach(children, child => {\n    if (error) {\n      return;\n    }\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n    const element = /*#__PURE__*/_jsx(ProgressBar, {});\n\n    if (child.type === element.type) return;\n    const childType = child.type;\n    const childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(`Children of ${componentName} can contain only ProgressBar ` + `components. Found ${childIdentifier}.`);\n  });\n  return error;\n}\n\nconst defaultProps = {\n  min: 0,\n  max: 100,\n  animated: false,\n  isChild: false,\n  visuallyHidden: false,\n  striped: false\n};\n\nfunction getPercentage(now, min, max) {\n  const percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\n\nfunction renderProgressBar({\n  min,\n  now,\n  max,\n  label,\n  visuallyHidden,\n  striped,\n  animated,\n  className,\n  style,\n  variant,\n  bsPrefix,\n  ...props\n}, ref) {\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...props,\n    role: \"progressbar\",\n    className: classNames(className, `${bsPrefix}-bar`, {\n      [`bg-${variant}`]: variant,\n      [`${bsPrefix}-bar-animated`]: animated,\n      [`${bsPrefix}-bar-striped`]: animated || striped\n    }),\n    style: {\n      width: `${getPercentage(now, min, max)}%`,\n      ...style\n    },\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max,\n    children: visuallyHidden ? /*#__PURE__*/_jsx(\"span\", {\n      className: \"visually-hidden\",\n      children: label\n    }) : label\n  });\n}\n\nconst ProgressBar = /*#__PURE__*/React.forwardRef(({\n  isChild,\n  ...props\n}, ref) => {\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n\n  const {\n    min,\n    now,\n    max,\n    label,\n    visuallyHidden,\n    striped,\n    animated,\n    bsPrefix,\n    variant,\n    className,\n    children,\n    ...wrapperProps\n  } = props;\n  return /*#__PURE__*/_jsx(\"div\", {\n    ref: ref,\n    ...wrapperProps,\n    className: classNames(className, bsPrefix),\n    children: children ? map(children, child => /*#__PURE__*/cloneElement(child, {\n      isChild: true\n    })) : renderProgressBar({\n      min,\n      now,\n      max,\n      label,\n      visuallyHidden,\n      striped,\n      animated,\n      bsPrefix,\n      variant\n    }, ref)\n  });\n});\nProgressBar.displayName = 'ProgressBar';\nProgressBar.defaultProps = defaultProps;\nexport default ProgressBar;","import { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport '../css/botlist.css'\nimport ProgressBar from 'react-bootstrap/ProgressBar'\nimport { setSelectedSocketId } from '../actions/configurationAction'\n\nconst RenderBotsOnlineList = ({ selectedSocketId, setSelectedSocketId, botsOnline }) => {\n  useEffect(() => {\n    const handleEsc = (event) => {\n      if (event.keyCode === 27) {\n        setSelectedSocketId(undefined)\n      }\n    }\n    window.addEventListener('keydown', handleEsc)\n\n    return () => {\n      window.removeEventListener('keydown', handleEsc)\n    }\n  }, [setSelectedSocketId])\n\n  const renderBotList = () => {\n    return (\n      botsOnline.map((bot) => {\n        return (\n          <li key={bot.socketId} className={`list-group-item ${(bot.combat) ? 'botlistCombat' : 'botlist'}`}>\n            <div className={` ${(bot.combat) ? 'botCombat' : ''}`}>\n              <span className={`pointer ${selectedSocketId === bot.socketId ? 'is-selected' : ''}`} onClick={() => { setSelectedSocketId(bot.socketId) }}>{bot.name}</span>\n              <div>\n                <ProgressBar className='mt-1' variant='danger' now={bot.health / 20 * 100} />\n                <ProgressBar className='mt-1' variant='warning' now={bot.food / 20 * 100} />\n              </div>\n            </div>\n          </li>\n        )\n      })\n\n    )\n  }\n\n  return (\n    <ul className='list-group'>\n      <li className='list-group-item active'>Bots Online ({botsOnline.length})</li>\n      {renderBotList()}\n    </ul>\n  )\n}\n\nconst mapStateToProps = (reducers) => {\n  const { botsReducer, configurationReducer } = reducers\n  const { botsOnline } = botsReducer\n  const { selectedSocketId } = configurationReducer\n  return { botsOnline, selectedSocketId }\n}\n\nconst mapDispatchToProps = {\n  setSelectedSocketId\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RenderBotsOnlineList)\n","import { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Col, Row } from 'react-bootstrap'\nimport { Link, NavLink, Outlet } from 'react-router-dom'\nimport RenderBotsOnlineList from './../../components/RenderBotsOnlineList'\nimport { getBotBySocketId, getBotIndexBySocketId } from \"../../actions/botsAction\";\nimport { setSelectedSocketId } from '../../actions/configurationAction'\n\nconst ConfigureBotLayout = ({ match, socket, getBotBySocketId, selectedSocketId, setSelectedSocketId, getBotIndexBySocketId }) => {\n  const [botName, setBotName] = useState('')\n\n  useEffect(() => {\n    socket.emit(\"sendAction\", {\n      action: \"getConfig\",\n      socketId: selectedSocketId,\n      value: \"\",\n    });\n\n    setBotName(getBotBySocketId(selectedSocketId).name)\n  }, [selectedSocketId, getBotBySocketId, socket])\n\n  const updateReloadButton = () => {\n    socket.emit(\"sendAction\", {\n      action: \"action\",\n      socketId: selectedSocketId,\n      toBotData: {\n        type: \"reloadConfig\",\n        value: \"\",\n      },\n    });\n  }\n\n  return (\n    <>\n      <Row className=\"my-2\">\n        <Col md={6} lg={7}>\n          <h2>Bot Configuration - {botName ? botName : ''}</h2>\n        </Col>\n        <Col md={3}>\n          <Button as={Link} to='/dashboard' className=\"mb-1\">\n            Dashboard\n          </Button>\n          {' '}\n          <Button onClick={updateReloadButton} variant='danger' className=\"mb-1\">\n            Reload\n          </Button>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col xs={{ span: 12, order: 2 }} md={{ span: 9, order: 1 }} lg={10}>\n          <Row>\n            <Col>\n              <ul className='nav nav-tabs bg-dark'>\n                <li className='nav-item'><NavLink className='nav-link linkSpan' to='/configurebot/generalconfig'>General Configuration</NavLink></li>\n                <li className='nav-item'><NavLink className='nav-link linkSpan' to='/configurebot/itemstobeready'>Items To Be Ready</NavLink></li>\n                <li className='nav-item'><NavLink className='nav-link linkSpan' to='/configurebot/chests'>Chests</NavLink></li>\n                <li className='nav-item'><NavLink className='nav-link linkSpan' to='/configurebot/combat'>Combat</NavLink></li>\n                <li className='nav-item'><NavLink className='nav-link linkSpan' to='/configurebot/guardjob'>Guard Job</NavLink></li>\n                <li className='nav-item'><NavLink className='nav-link linkSpan' to='/configurebot/minerjob'>Miner Job</NavLink></li>\n                <li className='nav-item'><NavLink className='nav-link linkSpan' to='/configurebot/farmerjob'>Farmer Job</NavLink></li>\n                <li className='nav-item'><NavLink className='nav-link linkSpan' to='/configurebot/breederjob'>Breeder Job</NavLink></li>\n                <li className='nav-item'><NavLink className='nav-link linkSpan' to='/configurebot/sorterjob'>Sorter Job</NavLink></li>\n                <li className='nav-item'><NavLink className='nav-link linkSpan' to='/configurebot/processlist'>Process list</NavLink></li>\n                <li className='nav-item'><NavLink className='nav-link linkSpan' to='/configurebot/full_config'>Full config</NavLink></li>\n              </ul>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <div className='card px-5 pt-4 mr-0'>\n                <Outlet />\n              </div>\n            </Col>\n          </Row>\n        </Col>\n        <Col xs={{ span: 12, order: 1 }} md={{ span: 3, order: 2 }} lg={2} className='mb-3'>\n          <RenderBotsOnlineList />\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nconst mapStateToProps = (reducers) => {\n  const { botsReducer, configurationReducer } = reducers;\n  const { logs } = botsReducer;\n  const { socket, selectedSocketId } = configurationReducer;\n  return { logs, socket, selectedSocketId };\n};\n\nconst mapDispatchToProps = {\n  getBotBySocketId,\n  setSelectedSocketId,\n  getBotIndexBySocketId\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfigureBotLayout);\n"],"names":["getPercentage","now","min","max","percentage","Math","round","renderProgressBar","ref","label","visuallyHidden","striped","animated","className","style","variant","bsPrefix","props","_jsx","role","classNames","width","children","ProgressBar","React","isChild","useBootstrapPrefix","wrapperProps","map","child","cloneElement","displayName","defaultProps","mapDispatchToProps","setSelectedSocketId","connect","reducers","botsReducer","configurationReducer","botsOnline","selectedSocketId","useEffect","handleEsc","event","keyCode","undefined","window","addEventListener","removeEventListener","length","bot","combat","socketId","onClick","name","health","food","getBotBySocketId","getBotIndexBySocketId","logs","socket","match","useState","botName","setBotName","emit","action","value","md","lg","as","Link","to","toBotData","type","xs","span","order"],"sourceRoot":""}