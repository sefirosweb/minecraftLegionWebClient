{"version":3,"file":"static/js/759.a8e5f17a.chunk.js","mappings":"iOA6FMA,EAAqB,CACvBC,aAAAA,EAAAA,GACAC,aAAAA,EAAAA,GACAC,iBAAAA,EAAAA,GACAC,qBAAAA,EAAAA,GACAC,gBAAAA,EAAAA,IAGJ,WAAeC,EAAAA,EAAAA,KAZS,SAACC,GACrB,OAAOA,EAASC,uBAWoBR,EAAxC,EA/FsB,SAAC,GAEhB,IAFkBS,EAEnB,EAFmBA,MAAOC,EAE1B,EAF0BA,UAAWC,EAErC,EAFqCA,OAAQC,EAE7C,EAF6CA,wBAAyBC,EAEtE,EAFsEA,mBAAoBC,EAE1F,EAF0FA,oBAAqBC,EAE/G,EAF+GA,WACjHd,EACE,EADFA,aAAcC,EACZ,EADYA,aAAcC,EAC1B,EAD0BA,iBAAkBC,EAC5C,EAD4CA,qBAAsBC,EAClE,EADkEA,gBAuBpE,OACI,UAAC,EAAAW,SAAD,YACI,SAAC,IAAD,WACI,SAAC,IAAD,WACI,+CAGR,SAAC,IAAD,WACI,SAAC,IAAD,WACI,UAAC,IAAD,YAEI,UAAC,UAAD,CAAYC,UAAU,sCAAtB,WACI,SAAC,UAAD,0CACA,SAAC,YAAD,CAAcC,KAAK,WAAWC,MAAOP,EAAyBQ,SArB1C,SAACC,GACzCjB,EAAqBiB,EAAMC,OAAOH,cAuBlB,UAAC,UAAD,CAAYF,UAAU,qBAAtB,WACI,SAAC,UAAD,sBACA,SAAC,YAAD,CAAcC,KAAK,OAAOC,MAAOR,EAAQS,SAtCtC,SAACC,GACxBpB,EAAaoB,EAAMC,OAAOH,cAwCV,UAAC,UAAD,CAAYF,UAAU,8BAAtB,WACI,SAAC,UAAD,qCACA,SAAC,YAAD,CAAcC,KAAK,OAAOC,MAAON,EAAoBO,SAvCzC,SAACC,GACjCnB,EAAamB,EAAMC,OAAOH,cAyCV,UAAC,UAAD,CAAYF,UAAU,kCAAtB,WACI,SAAC,UAAD,sCACA,SAAC,YAAD,CAAcC,KAAK,OAAOC,MAAOL,EAAqBM,SAxCtC,SAACC,GACrClB,EAAiBkB,EAAMC,OAAOH,cA0Cd,UAAC,UAAD,CAAYF,UAAU,wBAAtB,WACI,SAAC,UAAD,8DACA,SAAC,YAAD,CAAcC,KAAK,OAAOC,MAAOJ,EAAYK,SArCvC,SAACC,GAC3BhB,EAAgBgB,EAAMC,OAAOH,cAuCb,4CAEKT,GACG,iBAAMa,UAAU,cAAhB,qBACA,iBAAMA,UAAU,YAAhB,yBAGR,2CAEKd,GACG,iBAAMc,UAAU,cAAhB,qBACA,iBAAMA,UAAU,YAAhB","sources":["pages/Configuration.jsx"],"sourcesContent":["import React, { Fragment } from 'react'\nimport { connect } from 'react-redux'\nimport Form from 'react-bootstrap/Form'\nimport { updateMaster, updateServer, updateServerPort, updateServerPassword, updateBotServer } from '../actions/configurationAction'\nimport { Col, Row } from 'react-bootstrap'\n\nconst Configuration = ({ loged, connected, master, webServerSocketPassword, webServerSocketURL, webServerSocketPort, serverBots,\n    updateMaster, updateServer, updateServerPort, updateServerPassword, updateBotServer\n}) => {\n\n    const handleChangeMaster = (event) => {\n        updateMaster(event.target.value)\n    }\n\n    const handleChangeWebSocketServer = (event) => {\n        updateServer(event.target.value)\n    }\n\n    const handleChangeWebSocketServerPort = (event) => {\n        updateServerPort(event.target.value)\n    }\n\n    const handleChangeWebSocketServerPassword = (event) => {\n        updateServerPassword(event.target.value)\n    }\n\n    const handleChangeBotServer = (event) => {\n        updateBotServer(event.target.value)\n    }\n\n    return (\n        <Fragment>\n            <Row>\n                <Col>\n                    <h1>Configuration</h1>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Form>\n\n                        <Form.Group controlId=\"handleChangeWebSocketServerPassword\">\n                            <Form.Label>Web Socket Server Password</Form.Label>\n                            <Form.Control type=\"password\" value={webServerSocketPassword} onChange={handleChangeWebSocketServerPassword} />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"handleChangeMaster\">\n                            <Form.Label>Master</Form.Label>\n                            <Form.Control type=\"text\" value={master} onChange={handleChangeMaster} />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"handleChangeWebSocketServer\">\n                            <Form.Label>Web Socket Server URL</Form.Label>\n                            <Form.Control type=\"text\" value={webServerSocketURL} onChange={handleChangeWebSocketServer} />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"handleChangeWebSocketServerPort\">\n                            <Form.Label>Web Socket Server Port</Form.Label>\n                            <Form.Control type=\"text\" value={webServerSocketPort} onChange={handleChangeWebSocketServerPort} />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"handleChangeBotServer\">\n                            <Form.Label>Server Bots (Used for connect to Bots Viewers)</Form.Label>\n                            <Form.Control type=\"text\" value={serverBots} onChange={handleChangeBotServer} />\n                        </Form.Group>\n\n                        <div>\n                            Server status:\n                            {connected ?\n                                <span className='color-green'>Online</span> :\n                                <span className='color-red'>Offline</span>\n                            }\n                        </div>\n                        <div>\n                            Login status:\n                            {loged ?\n                                <span className='color-green'>Loged!</span> :\n                                <span className='color-red'>Not loged</span>\n                            }\n                        </div>\n\n                    </Form>\n                </Col>\n            </Row>\n        </Fragment>\n    );\n\n}\n\nconst mapStateToProps = (reducers) => {\n    return reducers.configurationReducer\n}\n\nconst mapDispatchToProps = {\n    updateMaster,\n    updateServer,\n    updateServerPort,\n    updateServerPassword,\n    updateBotServer\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Configuration);"],"names":["mapDispatchToProps","updateMaster","updateServer","updateServerPort","updateServerPassword","updateBotServer","connect","reducers","configurationReducer","loged","connected","master","webServerSocketPassword","webServerSocketURL","webServerSocketPort","serverBots","Fragment","controlId","type","value","onChange","event","target","className"],"sourceRoot":""}