{"version":3,"file":"static/js/519.e5036fd0.chunk.js","mappings":"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","sources":["components/configurebot/MinerJob.jsx","components/forms/FormCheck.jsx"],"sourcesContent":["import { Fragment } from 'react'\nimport { Col, Form, Row } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport { getBotBySocketId } from '../../actions/botsAction'\nimport FormCheck from \"../forms/FormCheck\";\nimport HouseXYZ from '../../images/HouseXYZ.png'\n\nconst MinerJob = (props) => {\n\n  const {\n    socket,\n    botsOnline,\n    selectedSocketId,\n  } = props\n\n  const botConfig = botsOnline.find((e) => { return e.socketId === selectedSocketId })\n  if (botConfig === undefined) { return null }\n\n  const handleChangeTunnel = (event) => {\n    socket.emit('sendAction', {\n      action: 'changeConfig',\n      socketId: botConfig.socketId,\n      value: {\n        configToChange: 'changeTunnel',\n        value: event.target.value\n      }\n    })\n  }\n\n  const handleChangeWorld = (event) => {\n    socket.emit('sendAction', {\n      action: 'changeConfig',\n      socketId: botConfig.socketId,\n      value: {\n        configToChange: 'changeWorldMiner',\n        value: event.target.value\n      }\n    })\n  }\n\n  const handleChangeOrientation = (event) => {\n    socket.emit('sendAction', {\n      action: 'changeConfig',\n      socketId: botConfig.socketId,\n      value: {\n        configToChange: 'changeOrientation',\n        value: event.target.value\n      }\n    })\n  }\n\n  const handleReverseMode = (mode) => {\n    console.log(mode)\n    socket.emit('sendAction', {\n      action: 'changeConfig',\n      socketId: botConfig.socketId,\n      value: {\n        configToChange: 'changeReverseModeMiner',\n        value: mode\n      }\n    })\n  }\n\n  const handleChangePosMiner = (event) => {\n    const pos = Number(event.target.value)\n\n    if (!Number.isInteger(pos) && event.target.value !== '-') {\n      return null\n    }\n\n    const coord = event.target.id\n    socket.emit('sendAction', {\n      action: 'changeConfig',\n      socketId: botConfig.socketId,\n      value: {\n        configToChange: 'changePosMiner',\n        value: {\n          coord,\n          pos: event.target.value\n        }\n      }\n    })\n  }\n\n  return (\n    <>\n\n      <Row className='mb-3'>\n        <Col>\n          <label>\n            Depending the tunnel type and orientation have a different behavior\n          </label>\n        </Col>\n      </Row>\n\n      <Row className='mb-3'>\n        <Col md={6}>\n          <Form>\n            <Form.Group as={Row}>\n              <Col md={3}>\n                Tunel type?\n              </Col>\n              <Col md={9}>\n                <Form.Check\n                  type='radio'\n                  id={`handleChangeTunnel`}\n                  label={`Make a Hole`}\n                  value='vertically'\n                  onChange={handleChangeTunnel}\n                  checked={botConfig.config.minerCords.tunel === 'vertically'}\n                />\n                <Form.Check\n                  type='radio'\n                  id={`handleChangeTunnel`}\n                  label={`Make a Tunel`}\n                  value='horizontally'\n                  onChange={handleChangeTunnel}\n                  checked={botConfig.config.minerCords.tunel === 'horizontally'}\n                />\n              </Col>\n            </Form.Group>\n          </Form>\n        </Col>\n        <Col md={6}>\n\n          <Form>\n            <Form.Group as={Row}>\n              <Col md={3}>\n                Orientation?\n              </Col>\n              <Col md={9}>\n                <Form.Check\n                  type='radio'\n                  id={`handleChangeOrientation`}\n                  label={`X+`}\n                  value='x+'\n                  onChange={handleChangeOrientation}\n                  checked={botConfig.config.minerCords.orientation === 'x+'}\n                />\n                <Form.Check\n                  type='radio'\n                  id={`handleChangeOrientation`}\n                  label={`X-`}\n                  value='x-'\n                  onChange={handleChangeOrientation}\n                  checked={botConfig.config.minerCords.orientation === 'x-'}\n                />\n                <Form.Check\n                  type='radio'\n                  id={`handleChangeOrientation`}\n                  label={`Z+`}\n                  value='z+'\n                  onChange={handleChangeOrientation}\n                  checked={botConfig.config.minerCords.orientation === 'z+'}\n                />\n                <Form.Check\n                  type='radio'\n                  id={`handleChangeOrientation`}\n                  label={`Z-`}\n                  value='z-'\n                  onChange={handleChangeOrientation}\n                  checked={botConfig.config.minerCords.orientation === 'z-'}\n                />\n              </Col>\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n\n      <Row className='mb-3'>\n        <Col md={6}>\n          <FormCheck\n            id={\"reverseMode\"}\n            onChange={() =>\n              handleReverseMode(!botConfig.config.minerCords.reverse)\n            }\n            label={`Reverse Mode?`}\n            checked={botConfig.config.minerCords.reverse}\n          />\n        </Col>\n        <Col md={6}>\n          <Form>\n            <Form.Group as={Row}>\n              <Col md={3}>\n                World?\n              </Col>\n              <Col md={9}>\n                <Form.Check\n                  type='radio'\n                  id={`handleChangeWorld`}\n                  label={`Overworld`}\n                  value='minecraft:overworld'\n                  onChange={handleChangeWorld}\n                  checked={botConfig.config.minerCords.world === 'minecraft:overworld'}\n                />\n                <Form.Check\n                  type='radio'\n                  id={`handleChangeWorld`}\n                  label={`Nether`}\n                  value='minecraft:the_nether'\n                  onChange={handleChangeWorld}\n                  checked={botConfig.config.minerCords.world === 'minecraft:the_nether'}\n                />\n                <Form.Check\n                  type='radio'\n                  id={`handleChangeWorld`}\n                  label={`End`}\n                  value='minecraft:the_end'\n                  onChange={handleChangeWorld}\n                  checked={botConfig.config.minerCords.world === 'minecraft:the_end'}\n                />\n              </Col>\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n\n      <div className='p-3 mb-3 border rounded'>\n        <h5>Start Coords</h5>\n        <Row>\n\n          <Form.Group as={Col} sm=\"4\" md=\"3\" lg=\"2\" controlId=\"xStart\">\n            <Form.Label><span className='badge bg-primary text-white'>X Start</span></Form.Label>\n            <Form.Control\n              type=\"text\"\n              value={botConfig.config.minerCords.xStart}\n              onChange={handleChangePosMiner}\n            />\n          </Form.Group>\n\n          <Form.Group as={Col} sm=\"4\" md=\"3\" lg=\"2\" controlId=\"yStart\">\n            <Form.Label><span className='badge bg-warning text-dark'>Y Start</span></Form.Label>\n            <Form.Control\n              type=\"text\"\n              value={botConfig.config.minerCords.yStart}\n              onChange={handleChangePosMiner}\n            />\n          </Form.Group>\n\n          <Form.Group as={Col} sm=\"4\" md=\"3\" lg=\"2\" controlId=\"zStart\">\n            <Form.Label><span className='badge bg-secondary text-white'>Z Start</span></Form.Label>\n            <Form.Control\n              type=\"text\"\n              value={botConfig.config.minerCords.zStart}\n              onChange={handleChangePosMiner}\n            />\n          </Form.Group>\n        </Row >\n      </div >\n\n      <div className='p-3 mb-3 border rounded'>\n        <h5>End Coords</h5>\n        <Row>\n\n          <Form.Group as={Col} sm=\"4\" md=\"3\" lg=\"2\" controlId=\"xEnd\">\n            <Form.Label><span className='badge bg-primary text-white'>X End</span></Form.Label>\n            <Form.Control\n              type=\"text\"\n              value={botConfig.config.minerCords.xEnd}\n              onChange={handleChangePosMiner}\n            />\n          </Form.Group>\n\n          <Form.Group as={Col} sm=\"4\" md=\"3\" lg=\"2\" controlId=\"yEnd\">\n            <Form.Label><span className='badge bg-warning text-dark'>Y End</span></Form.Label>\n            <Form.Control\n              type=\"text\"\n              value={botConfig.config.minerCords.yEnd}\n              onChange={handleChangePosMiner}\n            />\n          </Form.Group>\n\n          <Form.Group as={Col} sm=\"4\" md=\"3\" lg=\"2\" controlId=\"zEnd\">\n            <Form.Label><span className='badge bg-secondary text-white'>Z End</span></Form.Label>\n            <Form.Control\n              type=\"text\"\n              value={botConfig.config.minerCords.zEnd}\n              onChange={handleChangePosMiner}\n            />\n          </Form.Group>\n        </Row >\n      </div >\n\n      <Row className='mb-5'>\n        <Col>\n          <label>\n            <img src={HouseXYZ} width='100%' alt='House_XYZ' />\n          </label>\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nconst mapStateToProps = (reducers) => {\n  const { botsReducer, configurationReducer } = reducers\n  const { botsOnline } = botsReducer\n  const { socket, selectedSocketId } = configurationReducer\n\n  return { botsOnline, socket, selectedSocketId }\n}\n\nconst mapDispatchToProps = {\n  getBotBySocketId\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MinerJob)\n","import React from 'react';\nimport { Col, Form, Row } from 'react-bootstrap';\n\n\n\nconst FormCheck = ({ id, checked, label, onChange }) => {\n    return (\n        <Form>\n            <Form.Group\n                as={Row}\n                className=\"mb-3\"\n                controlId=\"formPlaintextEmail\"\n            >\n                <Form.Label column sm=\"4\">\n                    {label}\n                </Form.Label>\n\n                <Col sm=\"8\">\n                    <Form.Check\n                        type=\"switch\"\n                        id={id}\n                        checked={checked}\n                        label={checked === true ? \"Yes\" : \"No\"}\n                        onChange={onChange}\n                    />\n                </Col>\n            </Form.Group>\n        </Form>\n    )\n}\n\nexport default FormCheck;\n"],"names":["mapDispatchToProps","getBotBySocketId","connect","reducers","botsReducer","configurationReducer","botsOnline","socket","selectedSocketId","props","botConfig","find","e","socketId","undefined","handleChangeTunnel","event","emit","action","value","configToChange","target","handleChangeWorld","handleChangeOrientation","handleChangePosMiner","pos","Number","isInteger","coord","id","className","md","as","Row","type","label","onChange","checked","config","minerCords","tunel","orientation","mode","reverse","console","log","world","Col","sm","lg","controlId","xStart","yStart","zStart","xEnd","yEnd","zEnd","src","HouseXYZ","width","alt","column"],"sourceRoot":""}